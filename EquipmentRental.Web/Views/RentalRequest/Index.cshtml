@model List<EquipmentRental.DataAccess.Models.RentalRequest>
@using Microsoft.AspNetCore.Identity
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Rental Requests";

    var user = HttpContextAccessor.HttpContext?.User;
    bool isCustomer = user?.IsInRole("Customer") ?? false;
    bool isManager = user?.IsInRole("Manager") ?? false;
    int userId = int.Parse(user?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
    
    // Get current search and filter values for maintaining state
    var currentSearch = Context.Request.Query["search"].ToString();
    var currentStatus = Context.Request.Query["status"].ToString();
}

<div class="container-fluid">
    <!-- Page Header with Title and Create Button -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>@ViewData["Title"]</h2>
        <a href="/RentalRequest/Create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Create Rental Request
        </a>
    </div>
    

    
    <!-- Alerts for feedback messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <!-- Search and Filter Panel -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Search & Filter</h5>
        </div>
        <div class="card-body">
            <form action="/RentalRequest" method="get" class="row g-3">
                <div class="col-md-5">
                    <label for="search" class="form-label">Search</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" id="search" name="search" value="@currentSearch" class="form-control" placeholder="Search by equipment or description..." />
                    </div>
                </div>
                <div class="col-md-4">
                    <label for="status" class="form-label">Status</label>
                    <select id="status" name="status" class="form-select">
                        <option value="">-- All Statuses --</option>
                        <option value="Pending" selected=@(currentStatus == "Pending")>Pending</option>
                        <option value="Approved" selected=@(currentStatus == "Approved")>Approved</option>
                        <option value="Rejected" selected=@(currentStatus == "Rejected")>Rejected</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="bi bi-filter"></i> Apply Filters
                    </button>
                    <a href="/RentalRequest" class="btn btn-outline-secondary">
                        <i class="bi bi-x-circle"></i> Clear
                    </a>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Results Count -->
    <div class="mb-3">
        <p class="text-muted">Showing @Model.Count rental request(s)</p>
    </div>
    
    <!-- Rental Requests Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-light">
                <tr>
                    <th>Equipment</th>
                    <th>Customer</th>
                    <th>Rental Period</th>
                    <th>Status</th>
                    <th>Total Cost</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            <p class="text-muted mb-0">No rental requests found</p>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Equipment?.Name</td>
                            <td>@(item.Customer?.FullName ?? "Unknown")</td>
                            <td>
                                <div>@item.RentalStartDate.ToShortDateString()</div>
                                <div class="text-muted">to</div>
                                <div>@item.RentalEndDate.ToShortDateString()</div>
                            </td>
                            <td>
                                @switch (item.Status)
                                {
                                    case "Pending":
                                        <span class="badge bg-warning text-dark">Pending</span>
                                        break;
                                    case "Approved":
                                        <span class="badge bg-success">Approved</span>
                                        break;
                                    case "Rejected":
                                        <span class="badge bg-danger">Rejected</span>
                                        break;
                                    case "Confirmed":
                                        <span class="badge bg-info">Confirmed</span>
                                        break;
                                    case "Picked-up":
                                        <span class="badge bg-primary">Picked-up</span>
                                        break;
                                    case "Returned":
                                        <span class="badge bg-secondary">Returned</span>
                                        break;
                                    default:
                                        <span class="badge bg-light text-dark">@item.Status</span>
                                        break;
                                }
                            </td>
                            <td>@item.TotalCost.ToString("C")</td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    @(item.Description.Length > 50 ? item.Description.Substring(0, 47) + "..." : item.Description)
                                }
                                else
                                {
                                    <span class="text-muted">No description</span>
                                }
                            </td>
                            <td>
                                @{
                                    // Get user role directly from claims
                                    var userRole = user?.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
                                    bool isAdminOrManager = userRole == "Administrator" || userRole == "Admin" || userRole == "Manager";
                                    
                                    // Manager/Admin Actions
                                    if (isAdminOrManager)
                                    {
                                        <div class="btn-group">
                                            <a href="/RentalRequest/Edit/@item.RentalRequestId" class="btn btn-sm btn-outline-primary" title="Edit">
                                                <i class="bi bi-pencil"></i> Edit
                                            </a>
                                            
                                            @if (item.Status == "Pending")
                                            {
                                                <a href="/RentalRequest/Approve/@item.RentalRequestId" class="btn btn-sm btn-outline-success" title="Approve">
                                                    <i class="bi bi-check-lg"></i> Approve
                                                </a>
                                                <a href="/RentalRequest/Reject/@item.RentalRequestId" class="btn btn-sm btn-outline-danger" title="Reject">
                                                    <i class="bi bi-x-lg"></i> Reject
                                                </a>
                                            }
                                            
                                            <form action="/RentalRequest/Delete/@item.RentalRequestId" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete" onclick="return confirm('Are you sure you want to delete this request?');">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </form>
                                        </div>
                                    }
                                    // Customer Actions
                                    else if (userRole == "Customer" && item.CustomerId == userId)
                                    {
                                        <div class="btn-group">
                                            @if (item.Status == "Pending")
                                            {
                                                <a href="/RentalRequest/Edit/@item.RentalRequestId" class="btn btn-sm btn-outline-primary" title="Edit">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                            }
                                            
                                            <form action="/RentalRequest/Delete/@item.RentalRequestId" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete" onclick="return confirm('Are you sure you want to delete this request?');">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </form>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No actions available</span>
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize any Bootstrap components
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Auto-dismiss alerts after 5 seconds
            setTimeout(function() {
                $(".alert").alert('close');
            }, 5000);
        });
    </script>
}
