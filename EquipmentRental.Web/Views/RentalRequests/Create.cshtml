@model ProjectDBClassLibrary.Model.RentalRequest
@using Microsoft.AspNetCore.Identity
@inject UserManager<AdvancedProgrammingASPProject.Areas.Identity.Data.Users> UserManager

@{
    ViewData["Title"] = "Create Rental Request";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var isCustomer = ViewBag.ReadOnlyUser as bool? ?? false;
    var customerName = ViewBag.UserIdName as string;
    var userIdValue = ViewBag.UserIdValue as int? ?? 0;
    var today = DateTime.Today.ToString("yyyy-MM-dd");
    var rentalPrice = ViewBag.DailyRentalPrice as double? ?? 0;
    var userList = ViewData["UserId"] as IEnumerable<SelectListItem>;
}

<h1 class="text-primary mb-4">Create Rental Request</h1>
<div class="card shadow p-4 mb-5">
    <form asp-action="Create">
        <div asp-validation-summary="All" class="text-danger mb-3"></div>

        @if (ViewBag.BookOnceAvailable == true)
        {
        <div class="alert alert-warning">
            This equipment is currently unavailable. You may book it starting <strong>@ViewBag.MinStartDate</strong>.
        </div>
        }


        @if (isCustomer)
        {
                <div class="mb-3">
                    <label class="form-label">User</label>
                    <input class="form-control readonly-field" value="@customerName" readonly />
                    <input type="hidden" asp-for="UserId" value="@userIdValue" />
                </div>
        }
        else
        {
                <div class="mb-3">
                    <label asp-for="UserId" class="form-label"></label>
                    <select asp-for="UserId" class="form-select" asp-items="userList">
                        <option value="">-- Select User --</option>
                    </select>
                    <span asp-validation-for="UserId" class="text-danger"></span>
                </div>
        }

        <input type="hidden" asp-for="EquipmentId" />
        <div class="mb-3">
            <label class="form-label">Equipment</label>
            <input class="form-control readonly-field" value="@ViewBag.EquipmentName" readonly />
        </div>

        <div class="mb-3">
            <label class="form-label">Daily Rental Price</label>
            <input id="DailyPrice" class="form-control readonly-field" value="@rentalPrice" readonly />
        </div>

         <div class="mb-3">
            <label asp-for="StartDate" class="form-label"></label>
           <input asp-for="StartDate" type="date" class="form-control" min="@ViewBag.MinStartDate" />

            <span asp-validation-for="StartDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="ReturnDate" class="form-label"></label>
            <input asp-for="ReturnDate" class="form-control" id="ReturnDate" />
            <span asp-validation-for="ReturnDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="TotalCost" class="form-label"></label>
            <input asp-for="TotalCost" class="form-control readonly-field" id="TotalCost" readonly />
            <span asp-validation-for="TotalCost" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-success">Submit</button>
        <a asp-action="Index" class="btn btn-secondary ms-2">Cancel</a>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const start = document.querySelector("#StartDate");
                const end = document.querySelector("#ReturnDate");
                const cost = document.querySelector("#TotalCost");
                const dailyPrice = parseFloat(document.querySelector("#DailyPrice").value || "0");

                function updatePriceAndCost() {
                    const startDate = new Date(start.value);
                    const endDate = new Date(end.value);

                    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) return;

                    const timeDiff = endDate - startDate;
                    const days = Math.max(0, Math.ceil(timeDiff / (1000 * 60 * 60 * 24)));

                    const total = days * dailyPrice;
                    cost.value = total.toFixed(2);
                }

                start.addEventListener("change", updatePriceAndCost);
                end.addEventListener("change", updatePriceAndCost);
            });
        </script>

        <style>
            .readonly-field {
                background-color: #f8f9fa;
                color: #6c757d;
                border: 1px solid #ced4da;
            }
        </style>
}
