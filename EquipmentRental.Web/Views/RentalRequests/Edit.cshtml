@model ProjectDBClassLibrary.Model.RentalRequest
@using Microsoft.AspNetCore.Identity
@inject UserManager<AdvancedProgrammingASPProject.Areas.Identity.Data.Users> UserManager

@{
    ViewData["Title"] = "Edit Rental Request";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var currentUser = await UserManager.GetUserAsync(User);
    var dbContext = Context.RequestServices.GetService(typeof(ProjectDBClassLibrary.Model.ProjectDBContext)) as ProjectDBClassLibrary.Model.ProjectDBContext;
    var mainUser = dbContext.Users.FirstOrDefault(u => u.UserId == currentUser.MainUserId);
    var isAdminOrManager = mainUser.RoleId == 1 || mainUser.RoleId == 3;
    var isCustomer = mainUser.RoleId == 2;
    var isPending = Model.Status == "Pending";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Edit Rental Request</h4>
        </div>
        <div class="card-body">
            @if (isCustomer && !isPending)
            {
                <div class="alert alert-warning mb-3">
                    This rental request has already been <strong>@Model.Status</strong>. You cannot make changes.
                </div>
            }

            <form asp-action="Edit" method="post">
                <div asp-validation-summary="All" class="text-danger mb-3"></div>

                @if (ViewBag.MinStartDate != null && isCustomer)
                {
        <div class="alert alert-warning mb-3">
                This equipment is not yet available. You may book it starting<strong>@(((DateTime?)ViewBag.MinStartDate)?.ToString("yyyy-MM-dd"))</strong> 
    
        </div>
                }



                <input type="hidden" asp-for="RentalRequestId" />
                <input type="hidden" asp-for="UserId" />
                <input type="hidden" asp-for="EquipmentId" />

                <!-- USER -->
                <div class="mb-3">
                    <label>User</label>
                  <input class="form-control readonly-field" value="@ViewBag.UserName" readonly />

<input type="hidden" asp-for="UserId" />

                </div>

                <!-- EQUIPMENT -->
                <div class="mb-3">
                    <label>Equipment</label>
                    <input class="form-control readonly-field" value="@ViewBag.EquipmentName" readonly />
                </div>

               <!-- START DATE -->
<div class="mb-3">
    <label asp-for="StartDate" class="form-label"></label>
                    @if (isCustomer && !isPending)
                    {
        <input asp-for="StartDate" class="form-control" id="StartDate" readonly />
                    }
                    else
                    {
        <input asp-for="StartDate" type="date" class="form-control" id="StartDate"
                  min="@(isCustomer && ViewBag.MinStartDate != null ? ((DateTime?)ViewBag.MinStartDate)?.ToString("yyyy-MM-dd") : null)"
     />
                    }

    <span asp-validation-for="StartDate" class="text-danger"></span>
</div>

<!-- RETURN DATE -->
<div class="mb-3">
    <label asp-for="ReturnDate" class="form-label"></label>
                    @if (isCustomer && !isPending)
                    {
            <input asp-for="ReturnDate" class="form-control" id="ReturnDate" readonly />
                    }
                    else
                    {
            <input asp-for="ReturnDate" class="form-control" id="ReturnDate" />
                    }
    <span asp-validation-for="ReturnDate" class="text-danger"></span>
</div>


                <!-- TOTAL COST -->
                <div class="mb-3">
                    <label asp-for="TotalCost" class="form-label"></label>
                    <input asp-for="TotalCost" class="form-control readonly-field" readonly id="TotalCost" />
                    <span asp-validation-for="TotalCost" class="text-danger"></span>
                </div>

                <!-- STATUS -->
                @if (isAdminOrManager)
                {
                    <div class="mb-3">
                        <label asp-for="Status" class="form-label"></label>
                               <select asp-for="Status" class="form-select">
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Denied">Denied</option>
                            </select>

                        <span asp-validation-for="Status" class="text-danger"></span>
                    </div>
                }
                else
                {
                    <input type="hidden" asp-for="Status" />
                }

                <div class="mt-3">
                    <button type="submit" class="btn btn-success" @(isCustomer && !isPending ? "disabled" : "")>Save</button>
                    <a asp-action="Index" class="btn btn-secondary ms-2">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const start = document.querySelector("#StartDate");
            const end = document.querySelector("#ReturnDate");
            const cost = document.querySelector("#TotalCost");
            const equipmentId = document.querySelector("input[name='EquipmentId']").value;

                async function fetchPrice() {
        if (!equipmentId) return 0;
        try {
            const res = await fetch(`/api/equipment/${equipmentId}/price`);
            const data = await res.json();
            return data.rentalPrice || 0; // FIX: Match your Equipment.RentalPrice field
        } catch { return 0; }
    }


            async function updateTotalCost() {
                const startDate = new Date(start.value);
                const endDate = new Date(end.value);
                const days = Math.max(0, Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)));
                const pricePerDay = await fetchPrice();
                cost.value = (days * pricePerDay).toFixed(2);
            }

            start?.addEventListener("change", updateTotalCost);
            end?.addEventListener("change", updateTotalCost);
            updateTotalCost();
        });
    </script>

    <style>
        .readonly-field {
            background-color: #f8f9fa;
            color: #6c757d;
            border: 1px solid #ced4da;
        }
    </style>
}