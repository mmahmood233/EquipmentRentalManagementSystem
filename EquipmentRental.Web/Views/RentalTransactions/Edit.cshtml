@model ProjectDBClassLibrary.Model.RentalTransaction

@{
    ViewData["Title"] = "Edit Rental Transaction";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Edit Rental Transaction</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="All" class="text-danger"></div>

            <input type="hidden" asp-for="RentalTransactionId" />
            <input type="hidden" asp-for="RentalRequestId" />
            <input type="hidden" asp-for="UserId" />
            <input type="hidden" asp-for="EquipmentId" />

            <div class="form-group">
                <label>User</label>
                <input class="form-control" value="@Model.User?.Fullname" readonly />
            </div>

            <div class="form-group">
                <label>Equipment</label>
                <input class="form-control" value="@Model.Equipment?.Name" readonly />
            </div>

            <div class="form-group">
                <label asp-for="RentalTransactionStartDate"></label>
                <input asp-for="RentalTransactionStartDate" class="form-control" />
                <span asp-validation-for="RentalTransactionStartDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="RentalTransactionReturnDate"></label>
                <input asp-for="RentalTransactionReturnDate" class="form-control" />
                <span asp-validation-for="RentalTransactionReturnDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="RentalPeriod"></label>
                <input asp-for="RentalPeriod" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label asp-for="RentalFee"></label>
                <input asp-for="RentalFee" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Deposit"></label>
              <input asp-for="Deposit" class="form-control" id="Deposit" />
                <span asp-validation-for="Deposit" class="text-danger"></span>
            </div>
<div class="form-group">
    <label class="fw-bold mb-2">Document Management</label>
    <div class="card border shadow-sm p-3 mb-3 bg-light">
                    @if (!string.IsNullOrEmpty(Model.DocumentPath))
                    {
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div>
                        <span class="text-secondary"><i class="bi bi-file-earmark-text"></i> Current File:</span>
                          <a asp-action="DownloadDocument" asp-route-id="@Model.RentalTransactionId" class="ms-1 text-primary fw-semibold" target="_blank">
                                    @Model.DocumentPath
    </a>

                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="RemoveDocument" value="true" id="RemoveDocument" />
                        <label class="form-check-label text-danger" for="RemoveDocument">Remove this document</label>
                    </div>
                </div>
                    }
                    else
                    {
                <div class="text-muted">No document uploaded yet.</div>
                    }

        <input type="hidden" name="ExistingDocumentPath" value="@Model.DocumentPath" />

        <div class="mt-3">
            <label for="DocumentFile" class="form-label">Upload New Document <span class="text-muted">(optional)</span></label>
            <input class="form-control" type="file" name="DocumentFile" id="DocumentFile" />
        </div>
    </div>
</div>



            <input type="submit" value="Save Changes" class="btn btn-primary" />
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const startInput = document.getElementById("RentalTransactionStartDate");
                const endInput = document.getElementById("RentalTransactionReturnDate");
                const feeInput = document.getElementById("RentalFee");
                const periodInput = document.getElementById("RentalPeriod");
                const requestId = document.querySelector("input[name='RentalRequestId']").value;

                async function updateFee() {
                    if (!startInput.value || !endInput.value) return;

                    try {
                        const response = await fetch(`/api/rental-request/${requestId}/price?startDate=${startInput.value}&returnDate=${endInput.value}`);
                        const data = await response.json();
                        periodInput.value = data.period;
                        feeInput.value = data.fee.toFixed(2);
                    } catch (error) {
                        console.error("Error calculating rental fee:", error);
                    }
                }

                startInput.addEventListener("change", updateFee);
                endInput.addEventListener("change", updateFee);
            });

                document.querySelector("form").addEventListener("submit", function (e) {
        const deposit = parseFloat(document.getElementById("Deposit").value);
        const rentalFee = parseFloat(document.getElementById("RentalFee").value);

        if (deposit > rentalFee) {
            e.preventDefault();
            alert("Deposit cannot be greater than Rental Fee.");
        }
    });

        </script>
}
